# -*- coding: utf-8 -*-
"""Images_Features_CSV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TxtnaMK6zxSzAHso3JPJO59xxI0NEKZP
"""

import os
import cv2
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import csv


def readImages(dirPath):
    all_images = list()
    imagesCount = []
    for (path, names, filenames) in sorted(os.walk(dirPath)):
        imagesCount.append(len(filenames))
        all_images += [os.path.join(path, file) for file in filenames]
    imagesCount = [i for i in imagesCount if i != 0]
    return all_images, imagesCount


# get all apples data
applesData, appleCount = readImages("drive/MyDrive/Fruits_Data/apple")
# print(applesData)
# get all bananas data
bananaData, bananaCount = readImages("drive/MyDrive/Fruits_Data/banana")

# print(applesData)


def featureExtraction(Images, feature):
    featureExtract = []
    for img in Images:
        originalImage = cv2.imread(img)
        grayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)
        (thresh, imageArray) = cv2.threshold(
            grayImage, 127, 255, cv2.THRESH_BINARY)
        if feature == 'blackPart':
            imageArray = np.round(imageArray)
            count = np.count_nonzero(imageArray == 0)
            featureExtract.append(count)

        if feature == 'left_diag':
            left_diag = [imageArray[j][j] for j in range(len(imageArray))]
            imageArray = np.round(left_diag)
            count = np.count_nonzero(imageArray == 0)
            featureExtract.append(count)

        if feature == 'right_diag':
            right_diag = [imageArray[len(imageArray)-1-i][i]
                          for i in range(len(imageArray)-1, -1, -1)]
            imageArray = np.round(right_diag)
            count = np.count_nonzero(imageArray == 0)
            featureExtract.append(count)
        if feature == 'left_diag_sum':
            left_diag = [imageArray[j][j] for j in range(len(imageArray))]
            Sum=np.sum(left_diag)
            featureExtract.append(int(Sum))

        if feature == 'right_diag_sum':
            right_diag = [imageArray[len(imageArray)-1-i][i]
                          for i in range(len(imageArray)-1, -1, -1)]
            Sum = np.sum(right_diag)
            featureExtract.append(int(Sum))

        if feature == 'left_column_avg':
            imageArray = np.array(imageArray)
            height = imageArray.shape[0]
            width = imageArray.shape[1]
            width_cutoff = width//2
            img= imageArray[:, :width_cutoff]
            left_Col=img[0:30]           
            Avg = np.average(left_Col)
            featureExtract.append(int(Avg))

        if feature == 'right_column_avg':
            imageArray = np.array(imageArray)
            height = imageArray.shape[0]
            width = imageArray.shape[1]
            width_cutoff = width//2
            img = imageArray[:, width_cutoff:]
            right_col=img[0:30]
            Avg=np.average(right_col)
            featureExtract.append(int(Avg))

        if feature == 'upward_rows_avg':
            imageArray = np.array(imageArray)
            height = imageArray.shape[0]
            width = imageArray.shape[1]
            height_cutoff = height//2
            rows = imageArray[:, :height_cutoff]
            up_row=rows[0:30]
            avg=np.average(up_row)
            featureExtract.append(int(avg))

        if feature == 'downward_rows_avg':
            imageArray = np.array(imageArray)
            height = imageArray.shape[0]
            width = imageArray.shape[1]
            height_cutoff = height//2
            rows = imageArray[:, height_cutoff:]
            down_row=rows[0:30]
            avg=np.average(down_row)
            featureExtract.append(int(avg))

    featureExtract = np.array(featureExtract)
    return featureExtract


# Apples All Features
ImageFeatures1 = featureExtraction(applesData, 'blackPart')
ImageFeatures2 = featureExtraction(applesData, 'left_diag')
ImageFeatures3 = featureExtraction(applesData, 'right_diag')
ImageFeatures4 = featureExtraction(applesData, 'left_diag_sum')
ImageFeatures5 = featureExtraction(applesData, 'right_diag_sum')
ImageFeatures6 = featureExtraction(applesData, 'left_column_avg')
ImageFeatures7 = featureExtraction(applesData, 'right_column_avg')
ImageFeatures8 = featureExtraction(applesData, 'upward_rows_avg')
ImageFeatures9 = featureExtraction(applesData, 'downward_rows_avg')
allFeatures_apple = list(zip(ImageFeatures1, ImageFeatures2, ImageFeatures3, ImageFeatures4,
                         ImageFeatures5, ImageFeatures6, ImageFeatures7, ImageFeatures8, ImageFeatures9))
# print((allFeatures_apple))

# Banana All Features
ImageFeatures1 = featureExtraction(bananaData, 'blackPart')
ImageFeatures2 = featureExtraction(bananaData, 'left_diag')
ImageFeatures3 = featureExtraction(bananaData, 'right_diag')
ImageFeatures4 = featureExtraction(bananaData, 'left_diag_sum')
ImageFeatures5 = featureExtraction(bananaData, 'right_diag_sum')
ImageFeatures6 = featureExtraction(bananaData, 'left_column_avg')
ImageFeatures7 = featureExtraction(bananaData, 'right_column_avg')
ImageFeatures8 = featureExtraction(bananaData, 'upward_rows_avg')
ImageFeatures9 = featureExtraction(bananaData, 'downward_rows_avg')
allFeatures_banana = list(zip(ImageFeatures1, ImageFeatures2, ImageFeatures3, ImageFeatures4,
                              ImageFeatures5, ImageFeatures6, ImageFeatures7, ImageFeatures8, ImageFeatures9))
# print((allFeatures_banana))


def featuresDataFrame(features, FruitName):
    # 1 For Apple and 2 For Bananas
    columns = ['Fruit Name', 'Black_Count', 'Left_Diagonal',
                'Right_Diagonal', 'Left_Diagonal_Sum', 'Right_Diagonal_Sum',
                'Left_column_avg', 'Right_column_avg', 'Upward_rows_avg', 'Downward_rows_avg']
    rows = []
    if FruitName == 'apple':
        for i in range(len(features)):
            rows.append([1, features[i][0], features[i][1],
                        features[i][2], features[i][3], features[i][4], features[i][5], 
                        features[i][6], features[i][7], features[i][8]])
    if FruitName == 'banana':
        for i in range(len(features)):
            rows.append([2, features[i][0], features[i][1],
                        features[i][2], features[i][3], features[i][4], features[i][5], 
                        features[i][6], features[i][7], features[i][8]])

    return pd.DataFrame(rows,
                   columns=columns)


appleDataFrame = featuresDataFrame(allFeatures_apple, 'apple')
bananaDataFrame = featuresDataFrame(allFeatures_apple, 'banana')
overallData=pd.concat([appleDataFrame, bananaDataFrame],ignore_index=True)
overallData.to_csv('features_extracted.csv')
pd.set_option('display.max_rows', 100)
pd.set_option('display.max_columns', 5)
ReadData = pd.read_csv('features_extracted.csv')
print(ReadData)